/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

sourceSets {
    main {
        java.srcDirs += "${project.buildDir}/generated/sources/pojo"
    }
}

apply from: 'release.gradle'
apply from: 'publish.gradle'
apply from: 'code_generator.gradle'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: project.dep_slf4j
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: project.dep_slf4j

    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.2'

    // test
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.3'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.15.2'

    // lombok
    compileOnly 'org.projectlombok:lombok:' + project.dep_lombok
    annotationProcessor 'org.projectlombok:lombok:' + project.dep_lombok
    testCompileOnly 'org.projectlombok:lombok:' + project.dep_lombok
    testAnnotationProcessor 'org.projectlombok:lombok:' + project.dep_lombok
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.register('cleanMqtt', Delete) {
    // Adjust this if JBambuAPI is a subproject or located elsewhere
    def jbambuApiBuildDir = rootProject.projectDir.toPath().resolve("JBambuAPI").toFile()

    def pattern = ~/([a-f0-9\-]+-ssl.+$)/

    if (!jbambuApiBuildDir.exists()) {
        logger.lifecycle("JBambuAPI build directory does not exist: ${jbambuApiBuildDir.absolutePath}")
        return
    }

    def matchingDirs = jbambuApiBuildDir.listFiles()?.findAll { file ->
        file.isDirectory() && file.name =~ pattern
    } ?: []

    if (matchingDirs.isEmpty()) {
        logger.lifecycle("No matching MQTT directories found in ${jbambuApiBuildDir}.")
    } else {
        matchingDirs.each { dir ->
            logger.lifecycle("Deleting MQTT directory: ${dir.absolutePath}")
            delete dir
        }
    }
}

tasks.named('clean').configure {
    dependsOn tasks.named('cleanMqtt')
}
